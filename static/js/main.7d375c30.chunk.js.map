{"version":3,"sources":["components/SearchForTable.js","components/Pagination.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["SearchForTable","setCondition","setColumn","setSearchName","searchName","className","action","onChange","e","target","value","type","placeholder","size","Pagination","transportListAll","setTransportList","useState","currentPage","setCurrentPage","recordsPerPage","pageNumberLimit","minPageNumberLimit","setMinPageNumberLimit","maxPageNumberLimit","setMaxPageNumberLimit","pagesCount","Math","ceil","length","pages","i","push","renderPageNumber","map","number","onClick","Number","indexOfLastItem","indexOfFirstItem","currentItems","slice","colspan","disabled","Table","transportList","column","condition","useEffect","axios","get","then","response","data","console","log","firstObj","tableHeader","Object","keys","header","shift","filter","n","name","String","quantity","distance","toLowerCase","includes","el","array","date","Date","toLocaleDateString","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d375c30.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TableBlock.scss'\r\n\r\nconst SearchForTable = ({setCondition, setColumn, setSearchName, searchName}) => {\r\n    const selectColumn = (e) => {\r\n        setColumn(e.target.value)\r\n    }\r\n    const selectCondition = (e) => {\r\n        setCondition(e.target.value)\r\n    }\r\n\r\n    const tableSearch = (e) => {\r\n        setSearchName(e.target.value)\r\n    }\r\n    // const tableSearch = (e) => {\r\n    //     debugger\r\n    //     const phrase =e.target.value;\r\n    //     const table = transportListAll;\r\n    //     const regPhrase = new RegExp(phrase.value, 'i');\r\n    //     let flag = false;\r\n    //     // var table = document.getElementById('info-table');\r\n    //     // var regPhrase = new RegExp(phrase.value, 'i');\r\n    //     // var flag = false;\r\n    //     for (let i = 1; i < table.rows.length; i++) {\r\n    //         flag = false;\r\n    //         for (let j = table.rows[i].cells.length - 1; j >= 0; j--) {\r\n    //             flag = regPhrase.test(table.rows[i].cells[j].innerHTML);\r\n    //             if (flag) break;\r\n    //         }\r\n    //         if (flag) {\r\n    //             table.rows[i].style.display = \"\";\r\n    //         } else {\r\n    //             table.rows[i].style.display = \"none\";\r\n    //         }\r\n    //\r\n    //     }\r\n    // }\r\n    return (\r\n        <div className={'searchForTableBlock'}>\r\n            <form action=\"\">\r\n                <p>FILTER</p>\r\n                <label> Выбор колонки: </label>\r\n                <select onChange={selectColumn}>\r\n                    <option value=''></option>\r\n                    <option value='name'>название (name)</option>\r\n                    <option value=\"quantity\">количество (quantity)</option>\r\n                    <option value=\"distance\">расстояние (distance)</option>\r\n                </select>\r\n                <label> Выбор условия: </label>\r\n                <select onChange={selectCondition}>\r\n                    <option value=''></option>\r\n                    <option value='equal'>равно (equal)</option>\r\n                    <option value=\"contains\">содержит (contains)</option>\r\n                    <option value=\"more\">больше (more)</option>\r\n                    <option value=\"less\">меньше (less)</option>\r\n                </select>\r\n                <div><input value={searchName} onChange={tableSearch} type=\"text\"\r\n                            placeholder={'Введите значение для поиска'}\r\n                            size=\"50\"/>\r\n                </div>\r\n                <button>Поиск (Search)</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchForTable;\r\n","import React, {useState} from 'react';\r\nimport './TableBlock.scss'\r\n\r\nconst Pagination = ({transportListAll, setTransportList}) => {\r\n        const [currentPage, setCurrentPage] = useState(1)\r\n        const [recordsPerPage, setRecordsPerPage] = useState(5)\r\n\r\n        const [pageNumberLimit, setPageNumberLimit] = useState(5)\r\n        const [minPageNumberLimit, setMinPageNumberLimit] = useState(0)\r\n        const [maxPageNumberLimit, setMaxPageNumberLimit] = useState(5)\r\n\r\n\r\n        const pagesCount = Math.ceil(transportListAll.length / recordsPerPage);\r\n\r\n        const pages = [];\r\n        for (let i = 1; i <= pagesCount; i++) {\r\n            pages.push(i)\r\n        }\r\n        const onPageChanged = (pageNumber) => {\r\n            setCurrentPage(Number(pageNumber))\r\n        }\r\n        const renderPageNumber = pages.map(number => {\r\n            if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\r\n                return <li\r\n                    key={number + 1}\r\n                    className={currentPage === number && 'selectedPage'}\r\n                    onClick={(e) => {\r\n                        onPageChanged(number)\r\n                    }}>\r\n                    {number} </li>\r\n            } else {\r\n                return null\r\n            }\r\n        })\r\n        const indexOfLastItem = currentPage * recordsPerPage\r\n        const indexOfFirstItem = indexOfLastItem - recordsPerPage\r\n        const currentItems = transportListAll.slice(indexOfFirstItem, indexOfLastItem)\r\n\r\n        const prevPage = () => {\r\n            setCurrentPage(currentPage - 1);\r\n            if ((currentPage - 1) % pageNumberLimit == 0) {\r\n                setMaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\r\n                setMinPageNumberLimit(minPageNumberLimit - pageNumberLimit);\r\n            }\r\n        }\r\n        const nextPage = () => {\r\n            setCurrentPage(currentPage + 1);\r\n            if (currentPage + 1 > maxPageNumberLimit) {\r\n                setMaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\r\n                setMinPageNumberLimit(minPageNumberLimit + pageNumberLimit);\r\n            }\r\n        }\r\n        //На доработку\r\n        // let pageIncrementBtn = null;\r\n        // if (pagesCount > maxPageNumberLimit) {\r\n        //     pageIncrementBtn = <li onClick={nextPage}>&hellip;</li>\r\n        // }\r\n        // let pageDecrementBtn = null;\r\n        // if (minPageNumberLimit <= 1) {\r\n        //     pageDecrementBtn = <li onClick={prevPage}>&hellip;</li>\r\n        // }\r\n\r\n        return (\r\n            <>\r\n                <tbody>\r\n                {currentItems}\r\n                </tbody>\r\n                <tr>\r\n                    <td className={'pagination'} colspan={\"4\"}>\r\n                        <div className={'paginationBlock'}>\r\n                            <div className={'paginationBlockBtn'}>\r\n                                <button onClick={prevPage} disabled={currentPage == pages[0] ? true : false}>PREV</button>\r\n                            </div>\r\n                            <div>\r\n                                <ul className={'pageNumbers'}>\r\n                                    {/*{pageIncrementBtn}*/}\r\n                                    {renderPageNumber}\r\n                                    {/*{pageDecrementBtn}*/}\r\n                                </ul>\r\n                            </div>\r\n                            <div className={'paginationBlockBtn'}>\r\n                                <button onClick={nextPage}\r\n                                        disabled={currentPage == pages[pages.length - 1] ? true : false}>NEXT\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </>\r\n\r\n        );\r\n    }\r\n;\r\n\r\nexport default Pagination;","import React, {useEffect, useState} from 'react';\r\nimport './TableBlock.scss'\r\nimport axios from \"axios\";\r\nimport SearchForTable from \"./SearchForTable\";\r\nimport Pagination from \"./Pagination\";\r\n\r\n\r\n// const state = {\r\n// columnsName: [{date: 'Дата', name: 'Название', quantity: 'Количество(кг)', distance: 'Расстояние(км)'}],\r\n//     data: [\r\n//         {date: '12.05.2010', name: 'Сырье', quantity: 1500, distance: 500},\r\n//         {date: '05.02.2222', name: 'Одежда', quantity: 100, distance: 2500},\r\n//         {date: '25.12.2333', name: 'Тара', quantity: 300, distance: 1_500},\r\n//         {date: '10.02.2000', name: 'Провиант', quantity: 150, distance: 3_500},\r\n//     ]\r\n// }\r\n\r\nconst Table = () => {\r\n        const [transportList, setTransportList] = useState([])\r\n        const [column, setColumn] = useState('')\r\n        const [condition, setCondition] = useState('')\r\n        const [searchName, setSearchName] = useState('')\r\n\r\n        useEffect(() => {\r\n            axios.get('http://localhost:3001/api/get')\r\n                .then((response) => {\r\n                    setTransportList(response.data)\r\n                    console.log(response)\r\n                })\r\n        }, [])\r\n        const firstObj = transportList.length ? transportList[0] : {};\r\n        const tableHeader = Object.keys(firstObj).map((header, i) => {\r\n            return <th key={header + i}>{header}</th>\r\n        })\r\n        tableHeader.shift(1)\r\n\r\n        const filteredTransportList = transportList.filter(n => {\r\n            return (\r\n                ((!column || 'name' === column) &&\r\n                    (!condition || 'equal' === condition) &&\r\n                    (!searchName || n.name === searchName)) ||\r\n                ((!column || 'quantity' === column) &&\r\n                    (!condition || 'equal' === condition) &&\r\n                    (!searchName || String(n.quantity) === searchName)) ||\r\n                ((!column || 'distance' === column) &&\r\n                    (!condition || 'equal' === condition) &&\r\n                    (!searchName || String(n.distance) === searchName))\r\n\r\n                ||\r\n\r\n                ((!column || 'quantity' === column) &&\r\n                    (!condition || 'more' === condition) &&\r\n                    (!searchName || +n.quantity >= +searchName))\r\n                ||\r\n                ((!column || 'distance' === column) &&\r\n                    (!condition || 'more' === condition) &&\r\n                    (!searchName || +n.distance >= +searchName))\r\n\r\n                ||\r\n\r\n                ((!column || 'quantity' === column) &&\r\n                    (!condition || 'less' === condition) &&\r\n                    (!searchName || +n.quantity <= +searchName))\r\n                ||\r\n                ((!column || 'distance' === column) &&\r\n                    (!condition || 'less' === condition) &&\r\n                    (!searchName || +n.distance <= +searchName))\r\n\r\n                ||\r\n\r\n                ((!column || 'name' === column) &&\r\n                    (!condition || 'contains' === condition) &&\r\n                    (!searchName || n.name.toLowerCase().includes(searchName))) ||\r\n                ((!column || 'quantity' === column) &&\r\n                    (!condition || 'contains' === condition) &&\r\n                    (!searchName || String(n.quantity).includes(searchName))) ||\r\n                ((!column || 'distance' === column) &&\r\n                    (!condition || 'contains' === condition) &&\r\n                    (!searchName || String(n.distance).includes(searchName)))\r\n            )\r\n        });\r\n        const transportListAll = filteredTransportList.map((el, i, array) => {\r\n            const date = (new Date(el.date)).toLocaleDateString()\r\n            return (\r\n                <tr key={el.id + i}>\r\n                    <td>{date}</td>\r\n                    <td>{el.name}</td>\r\n                    <td>{el.quantity}</td>\r\n                    <td>{el.distance}</td>\r\n                </tr>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <SearchForTable\r\n                        setColumn={setColumn}\r\n                        setCondition={setCondition}\r\n                        setSearchName={setSearchName}\r\n                        searchName={searchName}\r\n                    />\r\n                </div>\r\n                Search: {column}: {condition}: {searchName}\r\n                <div className=\"tableBlock\">\r\n                    <table>\r\n                        <thead>\r\n                        <tr>\r\n                            {tableHeader}\r\n                        </tr>\r\n                        </thead>\r\n                        <Pagination\r\n                            transportListAll={transportListAll}\r\n                            setTransportList={setTransportList}\r\n                        />\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default Table;","import './App.scss';\nimport Table from \"./components/Table\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Table/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}